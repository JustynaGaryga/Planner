0. Read the chapters about Java Swing from Head First Java and from your book. Also add to github a file called Week 16-22 October which will containt the list of these tasks.

1. Create a class called ComplexNumber. A complex number is a type of number from mathematics that has a real part and an imaginary part. Example: x : a*i + b. Here a is the imaginary part and b is the real part. The class will have 2 members: Integer real and Integer im, which represent the real and the imaginary parts. The class will have as methods: sum - receives as argument another ComplexNumber and does the sum of the numbers, product - receives as param another ComplexNumber and does the product of the numbers, toString which prints the complex number in the format: a*i + b (im + "*" + "+" + real), equals which tests if two complex numbers are equal (2 complex number are equal if the real parts are equal and if the imaginary parts are equal). Also create 2 constructors: one that receives 2 arguments for the real and imaginary part and one that does not receive arguments. You can add getters and setters as well. In the main() method instantiate several ComplexNumber and call the methods sum, product, equals and toString for the numbers of your choice.

2. Create a class called Name which has two members that represent the name and the surname of a person. The class should have as methods: public boolean equals (); • public int compareTo (); • public String toString(). Equals will check if a Name is equal to another Name object (a Name is equal to another Name if the name equals to the name and the surname is equal to the other's surname). CompareTo will start comparing the names. If they are equal it starts comparing the surnames (if the surname from the object received as param is "bigger" it returns 1, else returns -1). If the name received as param is "bigger" returns 1. If the name received as param is smaller returns "-1". In the main() method create an ArrayList of Name objects. Add several Name to it and call Arrays.sort and print the sorted ArrayList. Remember to create 2 constructors and getters and setters.

3. Create a Java program that will count the number of occurences of each word from a text. At the end it will print the results. 

4. Create a Java program that represents the implementation of a sorting algorithm (ex: Bubble Sort). Test your algorithm by calling the method on several arrays.

5. Create a class called SortedVector which inherits from Vector. The class should have 2 methods: addElement(Object) - adds the Object at the end of the vector and then sorts the vector and insertElementAt(Object, int pos) - inserts the element at the requires position and then sorts the vector. In the main() class instantiate several SortedVector and call their methods and print the results. 

6. Create a class called SetAsVector which inherits from Vector with the following methods: boolean add(Object) • boolean remove(Object) • boolean contains(Object) • String toString(). Add and remove methods return true if the operation succeeded. A Set is a Vector which has only unique elements inside, so add will return false and won't add anything if the element already exists in the vector. For remove, if the required element does not exist in the vector it will return false and true only if it found the element and succeeded in deleting it.
Graphical interface exercises

7. Create a Java program that has two buttons: one with the "Ok" and one with the text "Cancel". 

8. Exploring the graphical interface components. Create a Java program which has: a checkbox, a choice field, a list, a scroll bar, a text field. Display all this elements in a GridLayout.

9. Create a Java program that has a button. Add a click listener to the button and display a dialog when a user clicks the button. Display inside the dialog the number of times the button has been clicked: 'You have clicked the button x times'.

10. Create a Java program that has text fields for: name, surname, email and a button called "Submit". The button should become clickable when all the text fields have been completed. When clicking the button a dialog window should show up displaying the texts that have beed added in the text fields. Add another functionality to this program: when pressing the "x" button of the window the program should finish. 